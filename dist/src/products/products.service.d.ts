import { ProductsDTO, PuductStatusDTO, ImportProductDTO, ProductsSaveDTO } from './products.model';
import { Model } from 'mongoose';
export declare class ProductService {
    private readonly productModel;
    constructor(productModel: Model<any>);
    GetProductsForUser(page: number, limit: number): Promise<Array<any>>;
    countAllProductForUser(): Promise<number>;
    searchProduct(searchKey: string, page: number, limit: number): Promise<Array<ProductsDTO>>;
    getAllProduct(productFilter: any, page: number, limit: number): Promise<Array<any>>;
    countAllProduct(): Promise<number>;
    getAllProductByCategory(categoryId: string, page: number, limit: number): Promise<Array<any>>;
    countAllProductByCategory(categoryId: string): Promise<number>;
    getAllProductBySubCategory(subCategoryId: string, page: number, limit: number): Promise<Array<any>>;
    countAllProductBySubCategory(subCategoryId: string): Promise<number>;
    getDropdownListProduct(): Promise<Array<any>>;
    findProductByTitle(title: String): Promise<any>;
    getProductDetail(productId: string): Promise<ProductsDTO>;
    getProductDetailForUser(productId: string): Promise<any>;
    createProduct(productData: ProductsSaveDTO): Promise<ProductsDTO>;
    updateProduct(productId: string, productData: ProductsSaveDTO): Promise<ProductsDTO>;
    updateProductStatus(productId: string, productStatusData: PuductStatusDTO): Promise<ProductsDTO>;
    deleteProduct(productId: string): Promise<ProductsDTO>;
    getProductByIds(productIds: any): Promise<any>;
    countProductByCategoryId(categoryId: string): Promise<number>;
    countProductBySubCategoryId(subCategoryId: string): Promise<number>;
    updateProductStatusByCategoryId(categoryId: string, productStatusData: PuductStatusDTO): Promise<number>;
    addCartInProduct(cartData: any, products: any): Promise<any>;
    updateDealByCategoryId(categoryId: string, dealData: any): Promise<ProductsDTO>;
    updateDealById(productId: string, dealData: any): Promise<ProductsDTO>;
    updateProductStock(productId: string, variantData: any): Promise<ProductsDTO>;
    findProductStock(productId: string, unit: string): Promise<ProductsDTO>;
    updateRating(productId: string, ratingData: any): Promise<ProductsDTO>;
    getAllProductForExport(page: number, limit: number): Promise<Array<any>>;
    updateProductByImport(productId: string, productData: ImportProductDTO): Promise<ProductsDTO>;
    addProductByImport(productData: Array<ImportProductDTO>): Promise<any>;
    getProductByCategoryId(categoryId: string, page: number, limit: number): Promise<Array<ProductsDTO>>;
    getProductsBySubCategory(subCategoryId: string, page: number, limit: number): Promise<Array<ProductsDTO>>;
}
