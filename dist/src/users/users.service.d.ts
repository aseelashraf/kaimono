import { Model } from 'mongoose';
import { UsersDTO, UsersUpdateDTO, UserStatusDTO, AdminUserDTO, AdminDeliveryDTO, ExportedFileDTO } from './users.model';
import { AuthService } from '../utils/auth.service';
import { UtilService } from '../utils/util.service';
export declare class UserService {
    private readonly userModel;
    private authService;
    private utilService;
    constructor(userModel: Model<any>, authService: AuthService, utilService: UtilService);
    createUser(userData: AdminDeliveryDTO): Promise<UsersDTO>;
    regenerateVerificationCode(userId: string): Promise<UsersDTO>;
    getUserByEmail(email: String): Promise<UsersDTO>;
    updatePlayerId(userId: string, playerId: String): Promise<UsersDTO>;
    getUserInfo(userId: string): Promise<UsersDTO>;
    getExportedFileInfo(userId: string): Promise<ExportedFileDTO>;
    updateMyInfo(userId: string, userData: UsersUpdateDTO): Promise<UsersDTO>;
    updateOTP(userId: string, otp: number): Promise<UsersDTO>;
    setOTPVerification(userId: string, otpVerificationId: string): Promise<UsersDTO>;
    getAllUser(page: number, limit: number, search: string): Promise<Array<AdminUserDTO>>;
    countAllUser(search: string): Promise<number>;
    getUserById(userId: String): Promise<UsersDTO>;
    updateUserStatus(userId: string, userStatusData: UserStatusDTO): Promise<UsersDTO>;
    updatePassword(userId: string, salt: string, password: string): Promise<UsersDTO>;
    setEmailVerified(userId: string): Promise<UsersDTO>;
    setMobileVerified(mobileNumber: string): Promise<UsersDTO>;
    setMobileOTP(mobileNumber: string, otp: string, newMobileNumber?: string): Promise<UsersDTO>;
    updateMobileNumber(userId: string, mobileNumber: any): Promise<any>;
    findUserByEmailOrMobile(email: string, mobileNumber: string): Promise<UsersDTO>;
    findUserByMobile(mobileNumber: string): Promise<UsersDTO>;
    getAllDeliveryBoy(page: number, limit: number, search: string): Promise<Array<AdminUserDTO>>;
    countAllDeliveryBoy(search: string): Promise<number>;
    updateMyLanguage(userId: string, language: string): Promise<UsersDTO>;
    updateWallet(userId: string, walletAmount: number): Promise<UsersDTO>;
    increaseOrderDelivered(userId: string): Promise<any>;
    increaseOrderPurchased(userId: string): Promise<any>;
    descreaseOrderPurchased(userId: string): Promise<any>;
}
